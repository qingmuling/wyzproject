if __name__ == 'main': 
     下的代码只有在文件作为脚本直接执行时才会被执行，而 import 到其他脚本中是不会被执行的。

def randomGrid(N):
     return np.random.choice(vals, N*N, p=[0.2, 0.8]).reshape(N, N)
     从vals（255,0）中以概率P，随机选择N*N个

     np.random.choice(5, 3, p=[0.1, 0, 0.3, 0.6, 0]) 
     表示分别以p=[0.1, 0, 0.3, 0.6, 0]的概率从[0,1,2,3,4]这四个数中选取3个数
   
     .reshape(m,n)实质上是将元素重组为新的shape。


def addGlider(i, j, grid):
     不懂


def update(frameNum, img, grid, N):
      grid.copy()复制表格
      this.setData()方法-更新数据让框架自动更新对应视图区域

def main():

WYZ小组  结对编程 第一阶段讨论

一、共同理解
 1.生命算法原理
    a.生命细胞只有两种状态：“生”或“死”。
    b.开始时，随机设定为生或死。0表示死、1表示生。
    c.细胞下一状态由该周围8个细胞的上一生命状态决定。
       周围有三个活细胞，则为生。（状态赋值为1）
       周围有两个活细胞，则保持。（状态不变）
       其他情况，则为死。（状态赋值为0）
    
 2.如何搭建界面
    用Python可视化创建一个地图，用白色显示活细胞，用黑色显示死细胞。


二、需要实现的功能
  函数有：
  1、初始化地图：开始游戏时，对地图上的细胞随机赋值为0或1。
  2、绘制地图：绘制一个N*M大小的地图。
  3、细胞下一状态计算：计算周围活细胞的个数，更新该细胞的生命状态。
  4、主函数：运行生命游戏。
  

三、开发平台和技术工具选择
 我们对：C、Java、Python三种进行了讨论，最终选择了Python语言。
 因为：
   1.由于参考用C语言写的生命游戏算法后，我们发现虽然C语言实现比较简单，但是对于整个地图每一个状态都需要重新回到原点开始打印，而Python
使用animation模块，可以达到动态图的效果，这样效率更高，界面动态更为流畅。
   2.由于我们组成员对Python和Java的编程能力都不是很熟练，在对二者基础知识进行复习后，我们一致认为Python更好理解，上手更快。
 所以总结以上，我们最终选择了用Python语言，开发技术工具选择了pycharm。

四、如何结对与切换角色
  a.我们用GitHub托管我们的代码，利用QQ屏幕分享功能进行结对编程。
  b.一个人写代码另一个人监督，然后将写好的代码放置在GitHub上托管。
  c.下一次两人互换角色，修改完善代码。
  d.多次进行角色互换，直至成功实现代码功能。
